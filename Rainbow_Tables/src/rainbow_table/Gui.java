/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rainbow_table;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author simon
 */
public class Gui extends javax.swing.JFrame {

    public static String rainbowtable = "RainbowTable.ser";
    public static FileToTable deserializer = new FileToTable();
    public static Reduction reduceMan = new Reduction();
    public HashMap start = deserializer.loadRainbowTable(rainbowtable);

    /**
     * Creates new form Gui
     */
    public Gui() {
        FileToTable.fileAvailble(rainbowtable);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        hashText = new javax.swing.JTextField();
        plainText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        results = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        plainToHash = new javax.swing.JButton();
        crackHash = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("Results of Crack");

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        plainText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plainTextActionPerformed(evt);
            }
        });

        results.setColumns(20);
        results.setRows(5);
        jScrollPane1.setViewportView(results);

        jLabel1.setText("Enter Plain Text : { 0-9 } max 8 digits");

        jLabel2.setText("Enter Hash Text");

        plainToHash.setText("Plain to Hash");
        plainToHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plainToHashActionPerformed(evt);
            }
        });

        crackHash.setText("Crack Hash");
        crackHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crackHashActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clear)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(plainText, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                            .addComponent(hashText))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plainToHash)
                            .addComponent(crackHash))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plainText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plainToHash))
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hashText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(crackHash))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clear)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed

        plainText.setText("");
        hashText.setText("");
        results.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void plainTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plainTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plainTextActionPerformed

    private void plainToHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plainToHashActionPerformed

        String s = plainText.getText();
        String hashed = "Error";

        try {
            hashed = Sha_1.SHA1(s);
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }

        hashText.setText(hashed);
    }//GEN-LAST:event_plainToHashActionPerformed

    private void crackHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crackHashActionPerformed
        String cypherText = hashText.getText();
        String s = "", startValue = "", result = "Not Found";
        long timer = System.currentTimeMillis();
        boolean match = false;

        ///////////////////////////for code to crack hash///////       
        s = cypherText;
        for (int i = 5000; i > 0; i--) {
            s = reduceMan.reduce(s, i);
            if (start.containsKey(s)) {
                s = start.get(s).toString();
                match = true;
                break;
            } else {
//                try {
//                    s = Sha_1.SHA1(s);
//                } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
//                    Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
//                }
            }
        }

        String hashed = "";
        if (match) {
            for (int i = 1; i <= 5000; i++) {
                try {
                    hashed = Sha_1.SHA1(s);
                } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
                    Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (hashed.equals(cypherText)) {
                    result = s;
                } else {
                    s = reduceMan.reduce(s, i);
                }

            }
        }

        //////////end crack code//////////////
        //times to complete in milliseconds
        timer = System.currentTimeMillis() - timer;
        //Conver time to minutes:seconds:milliseconds
        String times = new SimpleDateFormat("mm:ss:SSS").format(new Date(timer));
        //Display hash, decyrpted text and time in results box.
        results.setText("Hash:    " + cypherText + "\nDecryped: " + result + "\nRun Time:   " + times);

    }//GEN-LAST:event_crackHashActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        FileToTable.fileAvailble(rainbowtable);
        HashMap start = deserializer.loadRainbowTable(rainbowtable);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton crackHash;
    private javax.swing.JTextField hashText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField plainText;
    private javax.swing.JButton plainToHash;
    private javax.swing.JTextArea results;
    // End of variables declaration//GEN-END:variables
}
