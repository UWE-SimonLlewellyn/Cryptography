/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bruteforce;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author simon
 */
public class BruteForce extends javax.swing.JFrame {

    /**
     * Creates new form BruteForce
     */
    public BruteForce() {
        initComponents();
    }

    // Gloabal string for the alphabet.
    String alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hashText = new javax.swing.JTextField();
        plainText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        results = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        plainToHash = new javax.swing.JButton();
        crackHash = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        nestButton = new javax.swing.JRadioButton();
        recButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Recursive Brute Force Password Cracker");

        plainText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plainTextActionPerformed(evt);
            }
        });

        results.setColumns(20);
        results.setRows(5);
        jScrollPane1.setViewportView(results);

        jLabel1.setText("Enter Plain Text: {a-z , 0-9 }");

        jLabel2.setText("Enter Hash Text");

        plainToHash.setText("Plain to Hash");
        plainToHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plainToHashActionPerformed(evt);
            }
        });

        crackHash.setText("Crack Hash");
        crackHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crackHashActionPerformed(evt);
            }
        });

        jLabel3.setText("Results of Crack");

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        nestButton.setText("Nest Loops");
        nestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nestButtonActionPerformed(evt);
            }
        });

        recButton.setText("Recursion");
        recButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clear)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(plainText, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                            .addComponent(hashText))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plainToHash)
                            .addComponent(crackHash)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nestButton)
                            .addComponent(recButton))))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plainText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plainToHash))
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hashText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(crackHash))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nestButton)
                        .addGap(4, 4, 4)
                        .addComponent(recButton)))
                .addGap(18, 18, 18)
                .addComponent(clear)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void crackHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crackHashActionPerformed
        String cypherText = hashText.getText();
        String  s = "Not Found", sAfterHash = "";
        Boolean nest = nestButton.isSelected(), rec = recButton.isSelected(), valid = true;
        long timer = System.currentTimeMillis();
        try {       

            if ((nest) && (!rec)) {

                s = NestLoop.nestLoop(alphabet, cypherText);
            } else if ((!nest) && (rec)) {
                while (!sAfterHash.equals(cypherText)) {
                    s = NextString.nextString(s, alphabet);
                    sAfterHash = Sha_1.SHA1(s);
                }
            }
            else{
                results.setText("Please section 1 decryption method");
                valid = false;
               }
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            Logger.getLogger(BruteForce.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(valid){
        //times to complete in milliseconds
        timer = System.currentTimeMillis() - timer;
        //Conver time to minutes:seconds:milliseconds
        String times = new SimpleDateFormat("mm:ss:SSS").format(new Date(timer));
        //Display hash, decyrpted text and time in results box. 
        results.setText("Hash:    " + cypherText + "\nDecryped: " + s + "\nRun Time:   " + times);
        }

    }//GEN-LAST:event_crackHashActionPerformed

    private void plainTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plainTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plainTextActionPerformed

    private void plainToHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plainToHashActionPerformed
        String s = plainText.getText(), hashed = "Error";
        Boolean valid = false;
        results.setText("");
        try {
        for (int i = 0; i<s.length();i++){
            if(alphabet.indexOf(s.charAt(i)) > -1){
                valid = true;
            }
            else{
                valid = false;
                break;
            }
        }    
        if(valid){        
            hashed = Sha_1.SHA1(s);
            hashText.setText(hashed);
        }
        else{
            results.setText("Plain text contains invalid characters."
                    + "\nOnly use a-z & 0-9");
        }
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            Logger.getLogger(BruteForce.class.getName()).log(Level.SEVERE, null, ex);
        }

        

    }//GEN-LAST:event_plainToHashActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed

        plainText.setText("");
        hashText.setText("");
        results.setText("");

    }//GEN-LAST:event_clearActionPerformed

    private void recButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_recButtonActionPerformed

    private void nestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nestButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nestButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BruteForce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BruteForce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BruteForce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BruteForce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BruteForce().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton crackHash;
    private javax.swing.JTextField hashText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton nestButton;
    private javax.swing.JTextField plainText;
    private javax.swing.JButton plainToHash;
    private javax.swing.JRadioButton recButton;
    private javax.swing.JTextArea results;
    // End of variables declaration//GEN-END:variables
}
